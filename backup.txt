import pygame

# Initialize Pygame
pygame.init()

# Set up the screen
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("My Pygame")

# Set up the clock
clock = pygame.time.Clock()

# Set up the rectangle
rect_color = (0, 0, 0)
rect_width = 750
rect_height = 175
rect_position = (screen_width / 2 - rect_width / 2, (screen_height - rect_height) - 20)
rect_thickness = 2
red_color = (255, 0, 0)
green_color = (0, 255, 0)
black_color = (0, 0, 0)
white_color = (255, 255, 255)

# Set up the font
font = pygame.font.SysFont(None, 30)


# Button class
class Button:
    def __init__(self, x, y, width, height, text, color, selected_color):
        self.rect = pygame.Rect(x, y, width, height)
        self.text = text
        self.color = color
        self.selected_color = selected_color
        self.selected = False

    def draw(self, surface):
        # Draw the button
        pygame.draw.rect(
            surface, self.selected_color if self.selected else self.color, self.rect, 2
        )

        # Draw the button text
        text_surface = font.render(self.text, True, black_color)
        text_rect = text_surface.get_rect(center=self.rect.center)
        surface.blit(text_surface, text_rect)


# Set up the buttons
button_width = 200
button_height = 50
button_margin = 20
button1 = Button(
    (screen_width / 4 - button_width / 4) - 100,
    screen_height / 1.205 - button_height - button_margin,
    button_width,
    button_height,
    "Button 1",
    white_color,
    black_color,
)
button2 = Button(
    (screen_width / 4 - button_width / 4) - 100,
    screen_height / 1.205 + button_margin,
    button_width,
    button_height,
    "Button 2",
    white_color,
    black_color,
)
button3 = Button(
    (screen_width / 2 - button_width / 2),
    screen_height / 1.205 - button_height - button_margin,
    button_width,
    button_height,
    "Button 3",
    white_color,
    black_color,
)
button4 = Button(
    (screen_width / 2 - button_width / 2),
    screen_height / 1.205 + button_margin,
    button_width,
    button_height,
    "Button 4",
    white_color,
    black_color,
)

buttons = [button1, button2, button3, button4]
selected_button_index = 0

# Main game loop
while True:
    # Handle events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            quit()
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP:
                # Handle up arrow key press
                selected_button_index = (selected_button_index - 1) % len(buttons)
            elif event.key == pygame.K_DOWN:
                # Handle down arrow key press
                selected_button_index = (selected_button_index + 1) % len(buttons)
            elif event.key == pygame.K_LEFT:
                # Handle left arrow key press
                pass
            elif event.key == pygame.K_RIGHT:
                # Handle right arrow key press
                pass
            elif event.key == pygame.K_RETURN:
                # Handle enter key press
                button.clicked = True

    if button.clicked:
        button.clicked = False
        pass

    # Update game state
    for i, button in enumerate(buttons):
        button.selected = i == selected_button_index

    # Draw on the screen
    screen.fill((255, 255, 255))
    pygame.draw.rect(
        screen,
        rect_color,
        (rect_position, (rect_width, rect_height)),
        rect_thickness,
    )

    for button in buttons:
        button.draw(screen)

    # Update the screen
    pygame.display.update()

    # Set the FPS
    clock.tick(60)














    # Power: the strength of the move, measured in damage dealt to the opponent's hp.
    # Accuracy: the likelihood of the move hitting the opponent, measured as a percentage (e.g. 90% accuracy).
    # Type: the elemental type of the move, which determines its effectiveness against other types.
    # Heal Factor : The percent amount that you would heal.
    # Weather : Boolean value that tells if the move evokes a weather status.
    # Category: the classification of the move as either "Physical" or "Special", which determines which of the user's stats (Attack or Special Attack) is used to calculate damage.
    # Name: the name of the move.

    flamethrower = [90, 100, "Fire", 0, False, "Special", "Flamethrower"]
    air_slash = [75, 95, "Flying", 0, False, "Special", "Air Slash"]
    dragon_pulse = [85, 100, "Dragon", 0, False, "Special", "Dragon Pulse"]
    roost = [0, 100, "Flying", 50, False, "Status", "Roost"]
    giga_drain = [75, 100, "Grass", 50, False, "Special", "Giga Drain"]
    sludge_bomb = [90, 100, "Poison", 0, False, "Special", "Sludge Bomb"]
    leech_seed = [0, 90, "Grass", 0, False, "Status", "Leech Seed"]
    synthesis = [0, 100, "Grass", 50, False, "Status", "Synthesis"]
    hydro_pump = [110, 80, "Water", 0, False, "Special", "Hydro Pump"]
    ice_beam = [90, 100, "Ice", 0, False, "Special", "Ice Beam"]
    earthquake = [100, 100, "Ground", 0, False, "Physical", "Earthquake"]
    rapid_spin = [50, 100, "Normal", 0, False, "Physical", "Rapid Spin"]

    # Define the base stats, abilities, moves, and type strengths/weaknesses for each Pokémon
    charizard_base_stats = {
        "hp": 78,
        "Attack": 84,
        "Defense": 78,
        "Special Attack": 109,
        "Special Defense": 85,
        "Speed": 100,
    }

    charizard_abilities = ["Blaze", "Solar Power"]
    charizard_moves = [flamethrower, air_slash, dragon_pulse, roost]
    charizard_weaknesses = ["Rock", "Electric", "Water"]
    charizard_resistances = ["Fire", "Grass", "Bug", "Steel", "Fairy"]
    charizard_immunities = ["Ground"]

    venusaur_base_stats = {
        "hp": 80,
        "Attack": 82,
        "Defense": 83,
        "Special Attack": 100,
        "Special Defense": 100,
        "Speed": 80,
    }
    venusaur_abilities = ["Overgrow", "Chlorophyll"]
    venusaur_moves = [giga_drain, sludge_bomb, leech_seed, synthesis]
    venusaur_weaknesses = ["Fire", "Flying", "Ice", "Psychic"]
    venusaur_resistances = ["Water", "Electric", "Grass", "Fighting", "Fairy"]
    venusaur_immunities = []

    blastoise_base_stats = {
        "hp": 79,
        "Attack": 83,
        "Defense": 100,
        "Special Attack": 85,
        "Special Defense": 105,
        "Speed": 78,
    }
    blastoise_abilities = ["Torrent", "Rain Dish"]
    blastoise_moves = [hydro_pump, ice_beam, earthquake, rapid_spin]
    blastoise_weaknesses = ["Electric", "Grass"]
    blastoise_resistances = ["Water", "Fire", "Ice", "Steel"]
    blastoise_immunities = []

    # Create Charizard, Venusaur, and Blastoise Pokémon objects
    charizard = Pokemon(
        name="Charizard",
        type1="Fire",
        type2="Flying",
        base_stats=charizard_base_stats,
        abilities=charizard_abilities,
        moves=charizard_moves,
        weaknesses=charizard_weaknesses,
        resistances=charizard_resistances,
        immunities=charizard_immunities,
    )

    venusaur = Pokemon(
        name="Venusaur",
        type1="Grass",
        type2="Poison",
        base_stats=venusaur_base_stats,
        abilities=venusaur_abilities,
        moves=venusaur_moves,
        weaknesses=venusaur_weaknesses,
        resistances=venusaur_resistances,
        immunities=venusaur_immunities,
    )

    blastoise = Pokemon(
        name="Blastoise",
        type1="Water",
        type2=None,
        base_stats=blastoise_base_stats,
        abilities=blastoise_abilities,
        moves=blastoise_moves,
        weaknesses=blastoise_weaknesses,
        resistances=blastoise_resistances,
        immunities=blastoise_immunities,
    )